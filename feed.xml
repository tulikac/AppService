<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://azure.github.io/AppService/feed.xml" rel="self" type="application/atom+xml" /><link href="https://azure.github.io/AppService/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2025-06-21T01:13:42+00:00</updated><id>https://azure.github.io/AppService/feed.xml</id><title type="html">Azure App Service</title><subtitle>Announcements, updates, and release notes from the Azure App Service product team.</subtitle><author><name>Azure App Service</name></author><entry><title type="html">General Availability: App Service Webjobs on Linux</title><link href="https://azure.github.io/AppService/2025/05/01/Azure-App-Service-Webjobs-Linux-GA.html" rel="alternate" type="text/html" title="General Availability: App Service Webjobs on Linux" /><published>2025-05-01T00:00:00+00:00</published><updated>2025-05-01T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/05/01/Azure-App-Service-Webjobs-Linux-GA</id><content type="html" xml:base="https://azure.github.io/AppService/2025/05/01/Azure-App-Service-Webjobs-Linux-GA.html"><![CDATA[<p>Last year, we introduced <a href="https://azure.github.io/AppService/2024/04/04/Public-Preview-Sidecars-Webjobs.html">Webjobs on Linux</a>  as a preview feature.  We are now excited to announce <strong>General Avilability</strong> for Webjobs on App Service Linux for both  code an containers scenarios.</p>

<p>Webjobs enable the execution of background tasks and scheduled processes, which, unlike traditional web applications, are not triggered by an HTTP request.</p>

<p>You can learn more about Webjobs in our documentation: <a href="https://learn.microsoft.com/en-us/azure/app-service/webjobs-create?tabs=linuxcode">Run background tasks with WebJobs in Azure App Service</a>.</p>

<p>You can also watch a our demo during this week’s <a href="https://www.youtube.com/watch?v=ZP5NjMAzKPg">Azure Developers Live</a>, where we combine webjobs and  <a href="https://azure.github.io/AppService/2025/03/19/phi-sidecar-extension.html">sidecars</a> to modernize an existing application with AI capabilities using a Small Language Model.</p>

<p><a href="https://www.youtube.com/watch?v=ZP5NjMAzKPg"><img src="https://img.youtube.com/vi/ZP5NjMAzKPg/hqdefault.jpg" alt="Azure Developers Live" /></a></p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Last year, we introduced Webjobs on Linux as a preview feature. We are now excited to announce General Avilability for Webjobs on App Service Linux for both code an containers scenarios.]]></summary></entry><entry><title type="html">Routine Planned Maintenance Notifications Improvements for App Service</title><link href="https://azure.github.io/AppService/2025/04/29/Azure-App-Service-Notifications-Improvements.html" rel="alternate" type="text/html" title="Routine Planned Maintenance Notifications Improvements for App Service" /><published>2025-04-29T00:00:00+00:00</published><updated>2025-04-29T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/04/29/Azure-App-Service-Notifications-Improvements</id><content type="html" xml:base="https://azure.github.io/AppService/2025/04/29/Azure-App-Service-Notifications-Improvements.html"><![CDATA[<p>As of April 2025, we are happy to announce major improvements to App Service routine maintenance notifications.</p>

<h2 id="recent-improvements">Recent Improvements</h2>
<p>In our ongoing efforts to enhance the experience for App Service customers, we have made significant improvements to our maintenance notification system. These updates extend the March 2022 announcement about scheduled maintenance notifications <a href="https://azure.github.io/AppService/2022/02/01/App-Service-Planned-Notification-Feature.html">Maintenance Notifications for Azure App Service</a></p>

<h2 id="impacted-resources-blade">Impacted Resources Blade</h2>
<p>One of the key improvements is the introduction of the Impacted Resources blade in Azure Service Health. This new feature allows customers to see the exact App Service Plan resources that are affected by maintenance activities. By providing precise status timestamps for when maintenance starts and finishes, the Impacted Resources blade offers a clear and detailed view of the maintenance progress. This self-service capability empowers customers to track the status of their resources independently.</p>

<p>From the Azure portal, go to <strong>Home</strong> &gt; <strong>Monitor</strong> &gt; <strong>Service Health</strong> &gt; <strong>Planned maintenance</strong> &gt; <strong>Select an Issue Name</strong> &gt; <strong>Impacted Resources</strong> &gt; <strong>More Info</strong>.
<img src="/AppService/media/2025/04/MoreInfo1.png" alt="Impacted Resources" /></p>

<p>Here you can see the exact resources being upgraded within your App Service Plan. You can also see the current status. This can be pending, started, or completed. (with timestamps for ease of investigation)
<img src="/AppService/media/2025/04/MoreInfo2.png" alt="Impacted Resources More Info" /></p>

<h2 id="automated-release-notes">Automated Release Notes</h2>
<p>We have also implemented automated release notes. Customers will now receive automated links within maintenance notifications to App Service Release Notes, which provide only the most critical information. This addresses the high demand for basic release notes and ensures that customers have access to essential updates. <a href="https://github.com/Azure/AppService/releases">App Service Release Notes</a></p>

<h2 id="pausing-upgrades-during-business-hours">Pausing Upgrades During Business Hours</h2>
<p>Another important enhancement is the pausing of upgrades for App Service Plan resources during business hours. Maintenance operations are optimized to start outside the standard business hours of 9 AM to 5 PM. If resources are still upgrading by 9 AM in a given region, the upgrade will continue until reaching a safe stopping point, pausing before the next critical step and until the end of business hours. This approach ensures minimal disruption to customer workloads during peak business hours and provides a more predictable maintenance schedule.</p>]]></content><author><name>Azure App Service</name></author><category term="diagnostics" /><summary type="html"><![CDATA[As of April 2025, we are happy to announce major improvements to App Service routine maintenance notifications.]]></summary></entry><entry><title type="html">1-Bit Brilliance: BitNet on Azure App Service with Just a CPU</title><link href="https://azure.github.io/AppService/2025/04/23/Bitnet-on-Azure-App-Service.html" rel="alternate" type="text/html" title="1-Bit Brilliance: BitNet on Azure App Service with Just a CPU" /><published>2025-04-23T00:00:00+00:00</published><updated>2025-04-23T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/04/23/Bitnet-on-Azure-App-Service</id><content type="html" xml:base="https://azure.github.io/AppService/2025/04/23/Bitnet-on-Azure-App-Service.html"><![CDATA[<p>In a world where running large language models typically demands GPUs and hefty cloud bills, Microsoft Research is reshaping the narrative with <a href="https://www.msn.com/en-in/money/news/microsoft-research-announces-1-bit-a-small-language-model-that-can-run-on-cpu/ar-AA1DiDZd">BitNet</a> — a compact, 1-bit quantized transformer that delivers surprising capabilities even when deployed on modest hardware.</p>

<p>BitNet is part of a new wave of <em>small language models (SLMs)</em> designed for real-world applications where performance, latency, and cost are critical. Unlike traditional transformer models, BitNet employs 1-bit weight quantization and structured sparsity, making it remarkably lightweight while still retaining strong reasoning abilities.</p>

<p>In mid-April 2025, Microsoft Research unveiled BitNet b1.58 2B4T on Hugging Face—a transformer-based model with just 1.58-bit weights, trained on a staggering 4 trillion tokens.</p>

<p>In this blog, we’ll show you how you can run <a href="https://huggingface.co/microsoft/bitnet-b1.58-2B-4T-gguf">this model</a> on <strong>Azure App Service for Linux</strong>, leveraging its Sidecar architecture to serve BitNet models alongside your web app — no GPU required. Whether you’re building intelligent chat interfaces, processing reviews, or enabling offline summarization, you’ll see how App Service enables you to add AI to your app stack — with simplicity, scalability, and efficiency.</p>

<h2 id="getting-started-with-bitnet-on-azure-app-service">Getting Started with BitNet on Azure App Service</h2>

<p>To make it even easier to get hands-on with the BitNet model, we’ve published a ready-to-use Docker image:<br />
👉 <code class="language-plaintext highlighter-rouge">mcr.microsoft.com/appsvc/docs/sidecars/sample-experiment:bitnet-b1.58-2b-4t-gguf</code></p>

<p>You can try it in <strong>two simple ways</strong>:</p>

<hr />

<h3 id="1-spin-up-a-container-based-app-with-bitnet-quickest-way">1. <strong>Spin up a Container-Based App with BitNet (Quickest way)</strong></h3>

<p>The easiest way to get started is by creating a container-based app on Azure App Service and pointing it to the BitNet image.</p>

<p>Here’s how you can do it through the Azure Portal:</p>

<ol>
  <li>In the Azure Portal, go to <strong>Create a resource &gt; Web App</strong>.</li>
  <li>Under <strong>Publish</strong>, select <strong>Container</strong>.</li>
  <li>
    <p>Choose <strong>Linux</strong> as the Operating System.</p>

    <p><img src="/AppService/media/2024/07/CreateWebApp.jpg" alt="Create web app" /></p>
  </li>
  <li>In the <strong>Containers</strong> tab:
    <ul>
      <li>Set <strong>Image source</strong> to <strong>Other Container registries</strong>.</li>
      <li>
        <p>Enter this Image and Tag:<br />
  <code class="language-plaintext highlighter-rouge">mcr.microsoft.com/appsvc/docs/sidecars/sample-experiment:bitnet-b1.58-2b-4t-gguf</code></p>

        <p>Specify the port as 11434</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Review and <strong>Create</strong> the app.</p>

    <p><img src="/AppService/media/2025/04/container-config-bitnet.jpg" alt="Container config tab" /></p>
  </li>
</ol>

<p>Once deployed, you can simply browse to your app’s URL.</p>

<p>Because BitNet is based on <a href="https://github.com/ggerganov/llama.cpp">llama.cpp</a>, it automatically serves a <strong>default chat interface</strong> in the browser — no extra code needed!</p>

<p><img src="/AppService/media/2025/04/output-default.jpg" alt="Sample output" /></p>

<hr />

<h3 id="2-customize-your-chat-ui-with-a-python-flask-app">2. <strong>Customize Your Chat UI with a Python Flask App</strong></h3>

<p>If you want to build a more customized experience, we have you covered too!</p>

<p>You can use a simple <a href="https://flask.palletsprojects.com/">Flask</a> app that talks to our BitNet container running as a sidecar.<br />
Here’s how it works:</p>

<p>The app calls the BitNet sidecar its local endpoint:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ENDPOINT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://localhost:11434/v1/chat/completions</span><span class="sh">"</span>
</code></pre></div></div>

<p>It sends a POST request with the user message and <strong>streams</strong> back the response.</p>

<p>Here’s the core Flask route:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/chat</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">chat</span><span class="p">():</span>
    <span class="n">user_message</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">json</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_message</span><span class="p">}</span>
        <span class="p">],</span>
        <span class="sh">"</span><span class="s">stream</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">cache_prompt</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">n_predict</span><span class="sh">"</span><span class="p">:</span> <span class="mi">300</span>
    <span class="p">}</span>

    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">application/json</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">stream_response</span><span class="p">():</span>
        <span class="k">with</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">ENDPOINT</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="nf">iter_lines</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">line</span><span class="p">:</span>
                    <span class="n">text</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">text</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">data: </span><span class="sh">"</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">data_str</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="sh">"</span><span class="s">data: </span><span class="sh">"</span><span class="p">):]</span>
                            <span class="n">data_json</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">data_str</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">choice</span> <span class="ow">in</span> <span class="n">data_json</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                                <span class="n">content</span> <span class="o">=</span> <span class="n">choice</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">)</span>
                                <span class="k">if</span> <span class="n">content</span><span class="p">:</span>
                                    <span class="k">yield</span> <span class="n">content</span>
                        <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
                            <span class="k">pass</span>

    <span class="k">return</span> <span class="nc">Response</span><span class="p">(</span><span class="nf">stream_response</span><span class="p">(),</span> <span class="n">content_type</span><span class="o">=</span><span class="sh">'</span><span class="s">text/event-stream</span><span class="sh">'</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h3 id="steps-to-deploy">Steps to deploy:</h3>

<ol>
  <li><strong>Clone the sample Flask app</strong> from our <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/bitnet-chat-app">GitHub repo</a>.</li>
  <li><a href="https://learn.microsoft.com/en-us/azure/app-service/quickstart-python"><strong>Deploy the Flask app</strong></a> to Azure App Service as a Python Web App (Linux).</li>
  <li>After deployment, <strong>add a BitNet sidecar</strong>:
    <ul>
      <li>Go to your App Service in the Azure Portal.</li>
      <li>Go to the <strong>Deployment Center</strong> for your application and add the BitNet image as a sidecar container.
 <img src="/AppService/media/2025/04/bitnet-sidecar.jpg" alt="Add BitNet sidecar" /></li>
    </ul>
  </li>
  <li><strong>Save and Restart</strong> the app.</li>
</ol>

<p>Once complete, you can browse to your app URL — and you’ll see a simple, clean chat interface powered by BitNet!</p>

<p><img src="/AppService/media/2025/04/output-chat.jpg" alt="Sample chat output" /></p>

<h2 id="resources-and-further-reading">Resources and Further Reading</h2>

<ul>
  <li>
    <p><a href="https://github.com/microsoft/BitNet">🔗 BitNet GitHub Repository</a><br />
Explore the official BitNet project from Microsoft Research, including model details and technical documentation.</p>
  </li>
  <li>
    <p><a href="https://learn.microsoft.com/en-us/azure/app-service/">🔗 Azure App Service Documentation</a><br />
Learn more about Azure App Service and how to easily host web apps, APIs, and containers.</p>
  </li>
  <li>
    <p><a href="https://azure.github.io/AppService/2025/03/06/Sidecars-Deep-Dive-Part1.html">🔗 Azure App Service Sidecars Deep-Dive</a><br />
Understand how Sidecars can run supporting services (like BitNet!) alongside your main app in App Service.</p>
  </li>
  <li>
    <p><a href="https://github.com/ggerganov/llama.cpp">🔗 llama.cpp GitHub Repository</a><br />
Discover the project that inspired BitNet’s server — a lightweight C++ inference engine for LLMs.</p>
  </li>
  <li>
    <p><a href="https://learn.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=portal">🔗 Quickstart: Deploy a containerized app to App Service</a><br />
Step-by-step guide to deploying your own Docker container on Azure App Service.</p>
  </li>
  <li>
    <p><a href="https://mcr.microsoft.com/appsvc/docs/sidecars/sample-experiment:bitnet-b1.58-2b-4t-gguf">🔗 BitNet model container image</a><br />
The ready-to-use BitNet container image you can deploy today on App Service.</p>
  </li>
</ul>

<h2 id="closing-thoughts">Closing Thoughts</h2>

<p>We’re entering an exciting new era where small, efficient language models like BitNet are making AI more accessible than ever — no massive infrastructure needed.<br />
With Azure App Service, you can deploy these models quickly, scale effortlessly, and start adding real intelligence to your applications with just a few clicks.</p>

<p>We can’t wait to see what you build with BitNet and Azure App Service!<br />
If you create something cool or have feedback, let us know — your experiments help shape the future of lightweight, powerful AI.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[In a world where running large language models typically demands GPUs and hefty cloud bills, Microsoft Research is reshaping the narrative with BitNet — a compact, 1-bit quantized transformer that delivers surprising capabilities even when deployed on modest hardware.]]></summary></entry><entry><title type="html">Migrating your Docker Compose applications to the Sidecar feature</title><link href="https://azure.github.io/AppService/2025/04/01/Docker-compose-migration.html" rel="alternate" type="text/html" title="Migrating your Docker Compose applications to the Sidecar feature" /><published>2025-04-01T00:00:00+00:00</published><updated>2025-04-01T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/04/01/Docker-compose-migration</id><content type="html" xml:base="https://azure.github.io/AppService/2025/04/01/Docker-compose-migration.html"><![CDATA[<p>As we continue to enhance the developer experience on Azure App Service, we’re announcing the retirement of the <strong>Docker Compose</strong> feature on <strong>March 31, 2027</strong>. If you’re currently using Docker Compose to deploy and manage multi-container applications on App Service, now is the time to start planning your transition to the <strong>new Sidecar feature</strong>.</p>

<p>Sidecar is now <strong>generally available</strong> (<a href="https://techcommunity.microsoft.com/blog/appsonazureblog/announcing-the-general-availability-of-sidecar-extensibility-in-azure-app-servic/4267985">read the announcement</a>) and offers a more modern, intuitive way to build and manage multi-container apps on Azure App Service. With Sidecar, you get a simplified configuration model, deeper integration with the Azure ecosystem, and enhanced observability and control through the Azure portal.</p>

<p>Compared to Docker Compose, Sidecar provides several key benefits:</p>

<ul>
  <li><strong>Simplified configuration</strong> for deploying and managing multi-container applications.</li>
  <li><strong>Full Azure portal integration</strong>, allowing you to monitor, manage, and view logs for each container individually.</li>
  <li><strong>Native integration</strong> with Azure App Service features such as <strong>VNet</strong> and <strong>Managed Identity</strong>, enabling more secure and flexible architectures.</li>
</ul>

<p>In this guide, we’ll walk you through everything you need to know to successfully migrate from Docker Compose to Sidecar—ensuring your applications remain reliable, secure, and supported well into the future.</p>

<h2 id="migration-process-moving-from-docker-compose-to-sidecar">Migration Process: Moving from Docker Compose to Sidecar</h2>

<blockquote>
  <p>🛠 <strong>Recommendation:</strong> We strongly encourage you to use <strong><a href="https://learn.microsoft.com/en-us/azure/app-service/deploy-staging-slots">deployment slots</a></strong> during migration. This allows you to test your Sidecar configuration safely in a staging environment before swapping it into production. If you’re on a pricing tier below Standard, you can temporarily upgrade to Standard, perform the migration using slots, and then downgrade after you’re done.</p>
</blockquote>

<p><img src="/AppService/media/2025/04/migration.png" alt="migration" /></p>

<hr />

<h2 id="1-script-based-migration-recommended-for-simple-setups">1. Script-Based Migration (Recommended for Simple Setups)</h2>

<p>If your Docker Compose file follows standard configurations and doesn’t include any unsupported fields, you can automate the migration using our provided script.</p>

<blockquote>
  <p>⚠️ <strong>Important:</strong> Before running the script, ensure you <strong>take a backup of your site</strong> from the <a href="https://portal.azure.com">Azure portal</a>. This ensures you can safely roll back if anything goes wrong.</p>
</blockquote>

<h3 id="-get-the-migration-script">🔗 Get the Migration Script</h3>

<p>You can find the PowerShell script in our GitHub repository:<br />
👉 <strong><a href="https://github.com/Azure-Samples/sidecar-samples/blob/main/migration-script/update_sidecars.ps1">Download the script from GitHub</a></strong></p>

<hr />

<h3 id="️-running-the-script">▶️ Running the Script</h3>

<ol>
  <li>
    <p><strong>Save the script</strong> as <code class="language-plaintext highlighter-rouge">update-webapp.ps1</code> on your machine.</p>
  </li>
  <li>
    <p><strong>Run it from PowerShell</strong>, passing the required parameters:</p>
  </li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">/update-webapp.ps1</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-subscriptionId</span><span class="w"> </span><span class="s2">"&lt;subscriptionId&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-webAppName</span><span class="w"> </span><span class="s2">"&lt;webAppName&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-resourceGroup</span><span class="w"> </span><span class="s2">"&lt;resourceGroup&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-registryUrl</span><span class="w"> </span><span class="s2">"&lt;registryUrl&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-base64DockerCompose</span><span class="w"> </span><span class="s2">"&lt;base64DockerCompose&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-mainServiceName</span><span class="w"> </span><span class="s2">"&lt;mainServiceName&gt;"</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="nt">-targetPort</span><span class="w"> </span><span class="s2">"&lt;targetPort&gt;"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>💡 If your container registry requires authentication, also set:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">dockerRegistryServerUsername</code></li>
    <li><code class="language-plaintext highlighter-rouge">dockerRegistryServerPassword</code><br />
(If not set, the script will prompt you to enter them interactively.)</li>
  </ul>
</blockquote>

<hr />

<h3 id="-parameters-explained">🧩 Parameters Explained</h3>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">subscriptionId</code></td>
      <td>Azure Subscription ID</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">webAppName</code></td>
      <td>Name of your App Service app</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">resourceGroup</code></td>
      <td>Resource group containing your app</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">registryUrl</code></td>
      <td>URL of your container registry (e.g., <code class="language-plaintext highlighter-rouge">myregistry.azurecr.io</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">base64DockerCompose</code></td>
      <td>The base64-encoded version of your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">mainServiceName</code></td>
      <td>Name of the primary service to run the app</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">targetPort</code></td>
      <td>Port on which the main service listens</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="2-manual-migration">2. Manual Migration</h2>

<h3 id="a-prerequisites">a. Prerequisites</h3>

<p>Make sure the following tools are installed and ready:</p>

<ul>
  <li><strong><a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli">Azure CLI</a></strong></li>
  <li><strong><a href="https://docs.docker.com/get-docker/">Docker</a></strong> – installed and running</li>
  <li><strong><a href="https://code.visualstudio.com/">Visual Studio Code</a></strong> or any text editor for editing config files</li>
</ul>

<hr />

<h3 id="b-sign-in-to-azure-and-set-your-subscription">b. Sign In to Azure and Set Your Subscription</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az login
az account <span class="nb">set</span> <span class="nt">--subscription</span> &lt;your-subscription-id&gt;
</code></pre></div></div>

<hr />

<h3 id="c-gather-required-details">c. Gather Required Details</h3>

<p>Run the following commands to get key info:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az account show <span class="nt">--query</span> <span class="nb">id</span> <span class="nt">--output</span> tsv
az webapp list <span class="nt">--query</span> <span class="s2">"[].{name:name}"</span> <span class="nt">--output</span> tsv
az group list <span class="nt">--query</span> <span class="s2">"[].{name:name}"</span> <span class="nt">--output</span> tsv
az acr list <span class="nt">--query</span> <span class="s2">"[].{name:name}"</span> <span class="nt">--output</span> tsv
</code></pre></div></div>

<p>These will help you identify your subscription ID, app name, resource group, and Azure Container Registry (ACR).</p>

<hr />

<h3 id="d-create-a-deployment-slot">d. Create a Deployment Slot</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment slot create <span class="nt">--name</span> &lt;webapp-name&gt; <span class="nt">--resource-group</span> &lt;resource-group&gt; <span class="nt">--slot</span> &lt;slot-name&gt;
</code></pre></div></div>

<blockquote>
  <p>This slot is where you’ll configure and validate the Sidecar-based setup before going live.</p>
</blockquote>

<hr />

<h3 id="e-decode-the-existing-docker-compose-configuration">e. Decode the Existing Docker Compose Configuration</h3>

<p>Retrieve the encoded Docker Compose value:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config show <span class="nt">--name</span> &lt;webapp-name&gt; <span class="nt">--resource-group</span> &lt;resource-group&gt; <span class="nt">--query</span> linuxFxVersion
</code></pre></div></div>

<p>You’ll see a value like:<br />
<code class="language-plaintext highlighter-rouge">"COMPOSE|&lt;base64value&gt;"</code></p>

<p>Copy the base64 part and decode it in PowerShell:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8.GetString</span><span class="p">([</span><span class="n">System.Convert</span><span class="p">]::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="s2">"&lt;base64value&gt;"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>This will reveal your original <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> content, including service names, images, ports, and environment variables.</p>

<hr />

<h3 id="f-define-your-sidecar-containers">f. Define Your Sidecar Containers</h3>

<p>Use the following pattern to create each container defined in your Compose file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az rest <span class="nt">--method</span> PUT <span class="se">\</span>
  <span class="nt">--url</span> https://management.azure.com/subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;resource-group&gt;/providers/Microsoft.Web/sites/&lt;webapp-name&gt;/sitecontainers/&lt;container-name&gt;?api-version<span class="o">=</span>2023-12-01 <span class="se">\</span>
  <span class="nt">--body</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">&lt;container-name&gt;</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">properties</span><span class="se">\"</span><span class="s2">:{</span><span class="se">\"</span><span class="s2">image</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">&lt;image-name&gt;</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">isMain</span><span class="se">\"</span><span class="s2">: &lt;true/false&gt;, </span><span class="se">\"</span><span class="s2">targetPort</span><span class="se">\"</span><span class="s2">: &lt;port&gt;}}"</span>
</code></pre></div></div>

<h4 id="-example-single-service">✅ Example: Single service</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">my-service</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">myregistry.azurecr.io/my-service:latest</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az rest <span class="nt">--method</span> PUT <span class="nt">--url</span> https://management.azure.com/.../sitecontainers/my-service?... <span class="nt">--body</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">my-service</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">properties</span><span class="se">\"</span><span class="s2">:{</span><span class="se">\"</span><span class="s2">image</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">myregistry.azurecr.io/my-service:latest</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">isMain</span><span class="se">\"</span><span class="s2">: true, </span><span class="se">\"</span><span class="s2">targetPort</span><span class="se">\"</span><span class="s2">: 80}}"</span>
</code></pre></div></div>

<h4 id="-example-multiple-services">✅ Example: Multiple services</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">backend</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">myregistry.azurecr.io/myapp/backend:latest</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">myregistry.azurecr.io/myapp/frontend:latest</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3001:3001"</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Backend</span>
az rest <span class="nt">--method</span> PUT <span class="nt">--url</span> .../sitecontainers/backend?... <span class="nt">--body</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">backend</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">properties</span><span class="se">\"</span><span class="s2">:{</span><span class="se">\"</span><span class="s2">image</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">myregistry.azurecr.io/myapp/backend:latest</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">isMain</span><span class="se">\"</span><span class="s2">: true, </span><span class="se">\"</span><span class="s2">targetPort</span><span class="se">\"</span><span class="s2">: 3000}}"</span>

<span class="c"># Frontend</span>
az rest <span class="nt">--method</span> PUT <span class="nt">--url</span> .../sitecontainers/frontend?... <span class="nt">--body</span> <span class="s2">"{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">frontend</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">properties</span><span class="se">\"</span><span class="s2">:{</span><span class="se">\"</span><span class="s2">image</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">myregistry.azurecr.io/myapp/frontend:latest</span><span class="se">\"</span><span class="s2">, </span><span class="se">\"</span><span class="s2">isMain</span><span class="se">\"</span><span class="s2">: false, </span><span class="se">\"</span><span class="s2">targetPort</span><span class="se">\"</span><span class="s2">: 3001}}"</span>
</code></pre></div></div>

<p>Repeat for all containers defined in your Compose file.</p>

<hr />

<h3 id="g-switch-to-sidecar-mode">g. Switch to Sidecar Mode</h3>

<p>Now update your web app to use the Sidecar configuration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config <span class="nb">set</span> <span class="nt">--name</span> &lt;webapp-name&gt; <span class="nt">--resource-group</span> &lt;resource-group&gt; <span class="nt">--linux-fx-version</span> <span class="s2">"sitecontainers"</span>
</code></pre></div></div>

<hr />

<h3 id="h-restart-the-deployment-slot">h. Restart the Deployment Slot</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp restart <span class="nt">--name</span> &lt;webapp-name&gt; <span class="nt">--resource-group</span> &lt;resource-group&gt; <span class="nt">--slot</span> &lt;slot-name&gt;
</code></pre></div></div>

<p>This restarts the app to apply your new configuration.</p>

<hr />

<h3 id="i-validate-and-swap-to-production">i. Validate and Swap to Production</h3>

<p>Once you’ve verified that the slot is running correctly and the Sidecar setup works as expected:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment slot swap <span class="nt">--name</span> &lt;webapp-name&gt; <span class="nt">--resource-group</span> &lt;resource-group&gt; <span class="nt">--slot</span> &lt;slot-name&gt; <span class="nt">--target-slot</span> production
</code></pre></div></div>

<p>This brings your new configuration live without downtime.</p>

<hr />

<h2 id="mapping-docker-compose-attributes-to-sidecar-configuration">Mapping Docker Compose Attributes to Sidecar Configuration</h2>

<p>When migrating from Docker Compose to Sidecar, it’s important to understand how your existing Compose file maps to the Sidecar configuration model in Azure App Service. Below is a reference table showing how commonly used fields are translated.</p>

<h3 id="-supported-attribute-mapping">✅ Supported Attribute Mapping</h3>

<table>
  <thead>
    <tr>
      <th>Docker Compose Field</th>
      <th>Sidecar Configuration Field</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">command</code>, <code class="language-plaintext highlighter-rouge">entrypoint</code></td>
      <td><code class="language-plaintext highlighter-rouge">startUpCommand</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">environment</code></td>
      <td><code class="language-plaintext highlighter-rouge">environmentVariables</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">image</code></td>
      <td><code class="language-plaintext highlighter-rouge">image</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ports</code></td>
      <td><code class="language-plaintext highlighter-rouge">targetPort</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">volumes</code></td>
      <td><code class="language-plaintext highlighter-rouge">volumeMounts</code></td>
    </tr>
  </tbody>
</table>

<p>These fields are directly supported and should work seamlessly when configuring your containers with Sidecar.</p>

<hr />

<h3 id="-unsupported-or-ignored-fields">🚫 Unsupported or Ignored Fields</h3>

<p>Some Docker Compose fields are either <strong>not supported</strong> or were previously <strong>ignored</strong> even in the Docker Compose experience on App Service. These should be removed or reworked in your Sidecar configuration:</p>

<table>
  <thead>
    <tr>
      <th>Docker Compose Field</th>
      <th>Status</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">build</code></td>
      <td>❌ Not allowed</td>
      <td>You must pre-build and push images to a container registry.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">depends_on</code></td>
      <td>⚠️ Ignored</td>
      <td>No container startup ordering is guaranteed.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">networks</code></td>
      <td>⚠️ Ignored</td>
      <td>Network mode is handled internally by App Service.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">secrets</code></td>
      <td>⚠️ Ignored</td>
      <td>Use <a href="https://learn.microsoft.com/en-us/azure/app-service/configure-common#configure-app-settings">App Settings</a> or Key Vault integration instead.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ports</code> other than 80/8080</td>
      <td>⚠️ Ignored</td>
      <td>App Service only supports ports 80 and 8080 for container traffic.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">volumes</code> using <code class="language-plaintext highlighter-rouge">{WEBAPP_STORAGE_HOME}</code> or <code class="language-plaintext highlighter-rouge">{WEBSITES_ENABLE_APP_SERVICE_STORAGE}</code></td>
      <td>❌ Not supported</td>
      <td>Sidecar currently does not support mounting persistent Azure storage via these environment variables.</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>ℹ️ If your Compose file includes these unsupported options, you’ll need to revise or remove them before transitioning to Sidecar.</p>
</blockquote>

<hr />

<p>Here’s your <strong>Migration Limitations and Considerations</strong> section, rewritten for clarity and formatted into a clean comparison table. I’ve included a summary introduction as well:</p>

<hr />

<h2 id="migration-limitations-and-considerations">Migration Limitations and Considerations</h2>

<p>Before migrating from Docker Compose to the Sidecar feature, it’s important to understand a few key behavioral differences and current limitations. While Sidecar enables a more native and integrated experience on Azure App Service, there are some considerations around <strong>storage</strong>, <strong>networking</strong>, <strong>logging</strong>, and <strong>feature availability</strong>.</p>

<h3 id="-feature-comparison">🔄 Feature Comparison</h3>

<table>
  <thead>
    <tr>
      <th><strong>Aspect</strong></th>
      <th><strong>Docker Compose</strong></th>
      <th><strong>Sidecar Containers</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Storage</strong></td>
      <td>Volumes are defined in the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file and shared between containers.</td>
      <td>Storage configuration is container-specific. Persistent storage options are more limited; shared volumes must be handled differently or avoided.</td>
    </tr>
    <tr>
      <td><strong>Networking</strong></td>
      <td>Uses a default virtual network. Containers communicate using service names as hostnames.</td>
      <td>All containers run in the <strong>same network namespace</strong> and communicate over <code class="language-plaintext highlighter-rouge">localhost</code>. <strong>⚠️ Warning:</strong> Containers exposing the same port will cause conflicts.</td>
    </tr>
    <tr>
      <td><strong>Logging &amp; Monitoring</strong></td>
      <td>Custom logging drivers and external tools (e.g., ELK, Prometheus, Grafana) are typically used.</td>
      <td>Integrated with <strong>Azure Monitor</strong> and <strong>Azure Log Analytics</strong>. You may need to adjust container output or monitoring strategy for compatibility.</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="️-migration-limitations">⚠️ Migration Limitations</h3>

<table>
  <thead>
    <tr>
      <th><strong>Scenario</strong></th>
      <th><strong>Docker Compose</strong></th>
      <th><strong>Sidecar</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>ASE (App Service Environment)</strong></td>
      <td>Supported</td>
      <td>❌ <strong>Not yet supported</strong> – support coming soon</td>
    </tr>
    <tr>
      <td><strong>National Clouds (e.g., Azure Government, China)</strong></td>
      <td>Supported</td>
      <td>❌ <strong>Not yet supported</strong> – support planned</td>
    </tr>
  </tbody>
</table>

<hr />

<blockquote>
  <p>💡 We recommend evaluating each of these areas during your planning phase to ensure a smooth transition.</p>
</blockquote>

<p>Here’s your <strong>Frequently Asked Questions (FAQ)</strong> section, rewritten for clarity and polish while keeping it informative and approachable:</p>

<hr />

<h2 id="frequently-asked-questions">Frequently Asked Questions</h2>

<p><strong>🧩 How does scaling work with Sidecar containers?</strong><br />
Sidecar containers are tightly coupled with the main application container—they run as part of the same container unit. This means they <strong>start, stop, and scale together</strong> with the main container. When your app scales out or in, all associated sidecar containers follow the same lifecycle automatically.</p>

<hr />

<p><strong>🔐 Can I use private container registries?</strong><br />
Yes, you can. Azure App Service supports private container registries such as Azure Container Registry (ACR) and Docker Hub. Just configure the appropriate authentication credentials using the Azure Portal or Azure CLI.</p>

<hr />

<p><strong>🛠 How do I debug Sidecar container issues?</strong><br />
You can use <strong>Azure Monitor</strong> and <strong>Azure Log Analytics</strong> to collect and analyze logs. Additionally, the <strong>Diagnose &amp; Solve</strong> blade in the Azure Portal provides access to container logs, metrics, and troubleshooting tools to help you quickly identify and resolve issues.</p>

<hr />

<p><strong>🌐 How does networking between the main app and Sidecar containers work?</strong><br />
All containers in a Sidecar configuration share the <strong>same network namespace</strong>, so they can communicate with each other over <code class="language-plaintext highlighter-rouge">localhost</code>. For example, if your main app is running on <code class="language-plaintext highlighter-rouge">localhost:3000</code>, a sidecar can reach it at that address. Just ensure that each container listens on a unique port to avoid conflicts.</p>

<hr />

<h2 id="conclusion">Conclusion</h2>

<p>Migrating from Docker Compose to the Sidecar feature in Azure App Service is a strategic step toward a more modern, integrated, and manageable deployment experience. By transitioning early, you can take full advantage of Sidecar’s seamless integration with Azure services, enhanced observability, and simplified configuration—ensuring your applications remain secure, scalable, and future-ready well ahead of the Docker Compose retirement on <strong>March 31, 2027</strong>.</p>

<h3 id="-learn-more">📚 Learn More</h3>

<ul>
  <li><a href="https://learn.microsoft.com/en-us/azure/app-service/tutorial-custom-container-sidecar">Tutorial: Deploy multi-container apps using Sidecar (with custom containers)</a></li>
  <li><a href="https://learn.microsoft.com/en-us/azure/app-service/tutorial-sidecar?tabs=portal">Tutorial: Add sidecars to App Service (Portal experience)</a></li>
  <li><a href="https://azure.github.io/AppService/2025/03/19/Sidecar-extensions.html">Deep dive: Sidecar extensibility and real-world use cases</a></li>
</ul>

<hr />

<h2 id="getting-help">Getting Help</h2>

<p>Need assistance with your migration or have questions about the Sidecar feature?</p>

<ul>
  <li>
    <p>💬 <strong>Ask the Community</strong><br />
Connect with Azure App Service experts and other developers on <strong><a href="https://learn.microsoft.com/en-us/answers/tags/436/azure-app-service">Microsoft Q&amp;A</a></strong>. Browse existing answers or post your own questions.</p>
  </li>
  <li>
    <p>🛠 <strong>Get Technical Support</strong><br />
If you have an Azure support plan and require more in-depth help, you can <a href="https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/newsupportrequest">create a support request through the Azure Portal</a>.</p>
  </li>
</ul>

<p>We’re here to help ensure your migration is smooth and successful!</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[As we continue to enhance the developer experience on Azure App Service, we’re announcing the retirement of the Docker Compose feature on March 31, 2027. If you’re currently using Docker Compose to deploy and manage multi-container applications on App Service, now is the time to start planning your transition to the new Sidecar feature.]]></summary></entry><entry><title type="html">Introducing Sidecar Extensions for Azure App Service on Linux</title><link href="https://azure.github.io/AppService/2025/03/19/Sidecar-extensions.html" rel="alternate" type="text/html" title="Introducing Sidecar Extensions for Azure App Service on Linux" /><published>2025-03-19T00:00:00+00:00</published><updated>2025-03-19T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/03/19/Sidecar-extensions</id><content type="html" xml:base="https://azure.github.io/AppService/2025/03/19/Sidecar-extensions.html"><![CDATA[<p>In November 2024, we announced the <a href="https://techcommunity.microsoft.com/blog/appsonazureblog/announcing-the-general-availability-of-sidecar-extensibility-in-azure-app-servic/4267985">General Availability (GA) of the Sidecar feature for Azure App Service for Linux</a>, enabling developers to run sidecar containers alongside their applications. Today, we’re excited to take this capability even further with the introduction of <strong>Sidecar Extensions</strong>—pre-packaged integrations that simplify common use cases and accelerate development.</p>

<h2 id="what-are-sidecar-extensions">What Are Sidecar Extensions?</h2>

<p>Sidecar Extensions allow you to easily add common integrations to your web applications. With just a few configurations, you can enhance your applications with capabilities like caching, observability, and AI-powered enhancements.</p>

<p>The first set of Sidecar Extensions available today includes:</p>

<ul>
  <li><strong>Phi-4 &amp; Phi-3</strong> – Leverage Microsoft’s small language models (SLMs) for AI-powered text generation, summarization, and more.</li>
  <li><strong>Redis</strong> – Improve performance with an in-memory caching solution.</li>
  <li><strong>Datadog</strong> – Enhance observability and monitoring with seamless integration to Datadog’s APM and logging solutions.</li>
</ul>

<h2 id="get-started-with-sidecar-extensions">Get Started with Sidecar Extensions</h2>

<p>Getting started with Sidecar Extensions is simple. You can enable and configure these extensions through the Azure portal, CLI, or ARM templates.</p>

<p>To learn more and explore these integrations, check out our additional blogs:</p>
<ul>
  <li><a href="/AppService/2025/03/19/phi-sidecar-extension.html">Using Phi-4 &amp; Phi-3</a></li>
  <li><a href="/AppService/2025/03/19/redis-sidecar-extension.html">Add caching with Redis</a></li>
  <li><a href="/AppService/2025/03/19/datadog-sidecar-extension.html">Observability with Datadog</a></li>
</ul>

<p>We’re excited to see how you use Sidecar Extensions to enhance your applications. Try them out today and share your feedback!</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[In November 2024, we announced the General Availability (GA) of the Sidecar feature for Azure App Service for Linux, enabling developers to run sidecar containers alongside their applications. Today, we’re excited to take this capability even further with the introduction of Sidecar Extensions—pre-packaged integrations that simplify common use cases and accelerate development.]]></summary></entry><entry><title type="html">Using Datadog as a Sidecar Extension for Azure App Service on Linux</title><link href="https://azure.github.io/AppService/2025/03/19/datadog-sidecar-extension.html" rel="alternate" type="text/html" title="Using Datadog as a Sidecar Extension for Azure App Service on Linux" /><published>2025-03-19T00:00:00+00:00</published><updated>2025-03-19T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/03/19/datadog-sidecar-extension</id><content type="html" xml:base="https://azure.github.io/AppService/2025/03/19/datadog-sidecar-extension.html"><![CDATA[<p>Monitoring your applications is crucial for performance and reliability. With <strong>Datadog as a sidecar extension</strong>, you can seamlessly collect logs, metrics, and traces from your application—without modifying your app code.</p>

<p>In this blog, we’ll explore how to set it up in just a few steps. Let’s get started!</p>

<h2 id="configuring-the-application-to-use-datadog">Configuring the Application to Use Datadog</h2>

<h3 id="for-code-based-applications">For Code-Based Applications</h3>

<p>If you’re deploying a code-based application, you’ll need to setup a <strong>startup script</strong> to download and initialize the Datadog tracer when the application starts. We have a sample .NET app <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/devShopDNC">here</a>. You can use this sample or follow the steps for your own application.</p>

<h4 id="1-create-a-startup-file">1. Create a Startup File</h4>

<p>For .NET applications, create a <strong><code class="language-plaintext highlighter-rouge">startup.sh</code></strong> script in the same folder as your application. This script ensures the <strong>Datadog tracer</strong> is downloaded and extracted before launching your app:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># Create directories for Datadog tracer and .NET logs</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /datadog/tracer
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/LogFiles/dotnet

<span class="c"># Download the Datadog tracer tarball</span>
wget <span class="nt">-O</span> /datadog/tracer/datadog-dotnet-apm-2.49.0.tar.gz https://github.com/DataDog/dd-trace-dotnet/releases/download/v2.49.0/datadog-dotnet-apm-2.49.0.tar.gz

<span class="c"># Navigate to the tracer directory, extract the tarball, and return to the original directory</span>
<span class="nb">pushd</span> /datadog/tracer
<span class="nb">tar</span> <span class="nt">-zxf</span> datadog-dotnet-apm-2.49.0.tar.gz
<span class="nb">popd

</span>dotnet /home/site/wwwroot/&lt;yourapp&gt;.dll
</code></pre></div></div>

<p>Ensure this <strong><code class="language-plaintext highlighter-rouge">startup.sh</code></strong> file is included in your application’s root directory. If you are using the sample application, we have a startup file available <a href="https://github.com/Azure-Samples/sidecar-samples/blob/main/devShopDNC/devShopDNC/startup.sh">here</a></p>

<h4 id="2-deploy-to-azure-app-service">2. Deploy to Azure App Service</h4>

<p>Follow these steps to deploy your application with Datadog:</p>

<ol>
  <li>
    <p><strong>Create a .NET 8 Linux App Service</strong> in the Azure Portal.</p>

    <p><img src="/AppService/media/2025/03/create-code-based-app.jpg" alt="Create web app" /></p>
  </li>
  <li><strong>Set up CI/CD with GitHub</strong> to automate deployments. You can follow the <a href="https://learn.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=openid%2Caspnetcore">GitHub Actions guide for Azure App Service</a>.
    <blockquote>
      <p><em>Note: Sidecars for code-based applications currently support only GitHub Actions. Other deployment methods will be available soon.</em></p>
    </blockquote>
  </li>
  <li>
    <p><strong>Push your application code</strong> to your GitHub repository.</p>
  </li>
  <li>
    <p>In the <strong>Azure Portal</strong>, go to <strong>Your Web App → Configuration</strong> and set the <strong>Startup Command</strong> to:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/wwwroot/startup.sh
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="for-container-based-applications">For container-based applications</h3>

<ol>
  <li>
    <p>Use the Dockerfile in your repository to build a container image of your application. In the Dockerfile, download and extract the Datadog tracer. We have a sample Dockerfile <a href="https://github.com/Azure-Samples/sidecar-samples/blob/main/devShopDNC/devShopDNC/Dockerfile">here</a></p>
  </li>
  <li>
    <p>Build the image and push it to your preferred container registry, such as Azure Container Registry, Docker Hub, or a private registry.</p>
  </li>
  <li>
    <p>Go to the Azure Portal and create a container-based App Service.</p>

    <p><img src="/AppService/media/2024/07/CreateWebApp.jpg" alt="Create web app" /></p>

    <p>On the Container tab, make sure that Sidecar support is Enabled.</p>

    <p>Specify the details of your application image.</p>

    <p><img src="/AppService/media/2025/03/add-container.jpg" alt="Create web app" /></p>

    <p><em>Note: We strongly recommend enabling <a href="https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=portal%2Chttp">Managed Identity</a> for your Azure resources.</em></p>
  </li>
</ol>

<h2 id="setup-your-datadog-account">Setup your Datadog Account</h2>

<p>If you don’t have a Datadog account, you can create an instance of Datadog on the Azure portal by following this QuickStart.</p>

<p><a href="https://learn.microsoft.com/en-us/azure/partner-solutions/datadog/create">Create Datadog - Azure Native ISV Services</a></p>

<p>Alternatively, you can also create a service account on Datadog by following the steps in this tutorial.</p>

<p><a href="https://docs.datadoghq.com/account_management/org_settings/service_accounts/">Service Accounts (datadoghq.com)</a></p>

<p>Datadog offers a 14 days Free Trial if you would like to try out the service.</p>

<h2 id="add-the-datadog-sidecar-extension">Add the Datadog sidecar extension</h2>

<p>Once your application is deployed, follow these steps to enable the Datadog sidecar extension:</p>

<ol>
  <li>Navigate to the <strong>Azure Portal</strong> and open your <strong>App Service</strong> resource.</li>
  <li>
    <p>Go to <strong>Deployment Center</strong> in the left-hand menu and navigate to the <strong>Containers</strong> tab.</p>

    <p><em>Note: You might see a banner which says <strong>*Interested in adding containers to run alongside your app? Click here to give it a try</strong></em>. Clicking on the banner will enable the new Containers experience for you.*</p>
  </li>
  <li>
    <p>Add the Datadog sidecar extension like this</p>

    <p><img src="/AppService/media/2025/03/add-datadog.jpg" alt="Datadog Sidecar" /></p>

    <p>These are the Datadog settings that you would have to add</p>

    <ul>
      <li>
        <p><strong>Name</strong> - Name for your Site extension. This could be anything you choose.</p>
      </li>
      <li>
        <p><strong>Datadog API Key</strong> – If you have created the Datadog resource on the Azure portal, you can manage your API keys <a href="https://learn.microsoft.com/en-us/azure/partner-solutions/datadog/manage#api-keys">like this</a>.</p>

        <p>Alternatively, you can create your API Key by following the steps here <a href="https://docs.datadoghq.com/account_management/api-app-keys/">API and Application Keys</a>.</p>

        <table>
          <tbody>
            <tr>
              <td>We would encourage you to add sensitive information like API keys to Azure Key vault [Use Key Vault references - Azure App Service</td>
              <td>Microsoft Learn](https://learn.microsoft.com).</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p><strong>Datadog Site URL</strong> – Datadog offers you different sites for your data. You can use <code class="language-plaintext highlighter-rouge">us3.datadoghq.com</code> as this site is hosted in Azure. Therefore, the Observability data for your application stays in Azure. You can find more information about Datadog sites <a href="https://docs.datadoghq.com/getting_started/site/">here</a>.</p>
      </li>
      <li><strong>Datadog Service Name</strong>: The name of the service that would be displayed in your Datadog Service Catalog.</li>
      <li><strong>Datadog Environment</strong>: This is used to set the global environment, which allows you to differentiate data coming from various environments like staging or production.</li>
      <li><strong>Datadog Application Logs path</strong>: This is the path where you write your application logs. Typically, this will be <code class="language-plaintext highlighter-rouge">/home/LogFiles/*.log</code>, If you have changed the location for your application logs, you can specify that in this setting.</li>
      <li><strong>Datadog Trace Log Directory</strong>: <code class="language-plaintext highlighter-rouge">/home/LogFiles/dotnet</code></li>
    </ul>
  </li>
</ol>

<h3 id="disclaimer-datadog-image-usage">Disclaimer: Datadog Image Usage</h3>

<p>It’s important to note that the Datadog image used here is sourced directly from Datadog and is provided ‘as-is.’ Microsoft does not own or maintain this image. Therefore, its usage is subject to the terms of use outlined by Datadog, which can be found <a href="https://www.datadoghq.com/legal/terms/">here</a>.</p>

<h2 id="visualizing-your-observability-data-in-datadog">Visualizing Your Observability Data in Datadog</h2>

<p>You are all set! You can now see your Observability data flow to Datadog backend. Take a look at the Azure serverless page for a complete view of your App Services.</p>

<p><img src="/AppService/media/2024/07/datadog-serverless.jpg" alt="datadog-serverless" /></p>

<p>The Service Catalog gives you an overview of each service, such as the number of requests, latency, and more.</p>

<p><img src="/AppService/media/2024/07/datadog-servicecatalog.png" alt="Service Catalog" /></p>

<p>You can see your application logs by going to <code class="language-plaintext highlighter-rouge">Logs -&gt; Explorer</code></p>

<p><img src="/AppService/media/2024/07/datadog-logexplorer.png" alt="Logs Explorer" /></p>

<p>Your application traces will be under <code class="language-plaintext highlighter-rouge">APM-&gt;Traces-&gt;Explorer</code></p>

<p><img src="/AppService/media/2024/07/datadog-traceexplorer.png" alt="Traces Explorer" /></p>

<p>To learn more about Datadog dashboards, you can refer to the <a href="https://docs.datadoghq.com/dashboards/">documentation</a>.</p>

<h2 id="try-it-out-with-a-sample-python-app">Try It Out with a Sample Python App</h2>

<p>If you want to try the Datadog sidecar extension with a Python application, we have a sample available <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/datadog-python-sample">here</a>.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Monitoring your applications is crucial for performance and reliability. With Datadog as a sidecar extension, you can seamlessly collect logs, metrics, and traces from your application—without modifying your app code.]]></summary></entry><entry><title type="html">Running SLMs as Sidecar extensions on App Service for Linux</title><link href="https://azure.github.io/AppService/2025/03/19/phi-sidecar-extension.html" rel="alternate" type="text/html" title="Running SLMs as Sidecar extensions on App Service for Linux" /><published>2025-03-19T00:00:00+00:00</published><updated>2025-03-19T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/03/19/phi-sidecar-extension</id><content type="html" xml:base="https://azure.github.io/AppService/2025/03/19/phi-sidecar-extension.html"><![CDATA[<h2 id="introduction">Introduction:</h2>

<p>Natural language processing (NLP) is no longer limited to massive AI models requiring significant computational resources. With the rise of Small Language Models (SLMs), you can now integrate lightweight yet powerful AI capabilities into your applications without the cost and complexity of traditional Large Language Models (LLMs).</p>

<p>Phi-3 and Phi-4 are two such state-of-the-art SLMs optimized for efficiency and high-quality reasoning. Designed to operate with minimal resource overhead, these models are ideal for scenarios where responsiveness, security and cost-effectiveness are paramount.</p>

<ul>
  <li><strong>Phi-3-Mini-4K-Instruct</strong> is a compact 3.8B parameter model trained on a high-quality dataset, making it an excellent choice for inference tasks with limited infrastructure.</li>
  <li><strong>Phi-4</strong>, built on a blend of synthetic and public datasets, is a quantized model optimized for enhanced performance in constrained environments.</li>
</ul>

<p>By deploying these models as <strong>sidecars on App Service for Linux</strong>, you can seamlessly enhance applications with conversational AI, content generation, and advanced NLP features. Lets get started!</p>

<h2 id="building-a-frontend-for-phi-3-and-phi-4">Building a Frontend for Phi-3 and Phi-4</h2>

<p>To showcase the capabilities of running Phi-3 and Phi-4 as sidecars, we have a sample application that acts as a frontend for these models: <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/dotnet-slm-fashion-assistant-app">Fashion Assistant App</a>. This is a .NET Blazor application that implements a chat functionality, allowing users to interact with an AI-powered assistant for on-demand product information and styling suggestions.</p>

<ol>
  <li>Open the <strong>dotnet-slm-fashion-assistant-app</strong> project in VS Code.</li>
  <li>Open <strong>Program.cs</strong>. Here you can see how we have configured the endpoint for the model:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="n">sp</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">HttpClient</span> <span class="p">{</span> <span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"FashionAssistantAPI:Url"</span><span class="p">]</span> <span class="p">??</span> <span class="s">"http://localhost:11434/v1/chat/completions"</span><span class="p">)</span> <span class="p">});</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>Open <strong>SLMService.cs</strong> and navigate to the <code class="language-plaintext highlighter-rouge">StreamChatCompletionsAsync</code> function:
This function is calling the SLM endpoint using <code class="language-plaintext highlighter-rouge">HttpRequestMessage</code>
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">var</span> <span class="n">content</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">requestPayload</span><span class="p">),</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span> <span class="s">"application/json"</span><span class="p">);</span>

 <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">(</span><span class="n">HttpMethod</span><span class="p">.</span><span class="n">Post</span><span class="p">,</span> <span class="n">_apiUrl</span><span class="p">)</span>
 <span class="p">{</span>
     <span class="n">Content</span> <span class="p">=</span> <span class="n">content</span>
 <span class="p">};</span>

 <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_httpClient</span><span class="p">.</span><span class="nf">SendAsync</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">HttpCompletionOption</span><span class="p">.</span><span class="n">ResponseHeadersRead</span><span class="p">);</span>
 <span class="n">response</span><span class="p">.</span><span class="nf">EnsureSuccessStatusCode</span><span class="p">();</span>
</code></pre></div>    </div>

    <p>The response that we get from the endpoint is displayed one token at a time.</p>
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">while</span> <span class="p">(!</span><span class="n">reader</span><span class="p">.</span><span class="n">EndOfStream</span><span class="p">)</span>
 <span class="p">{</span>
     <span class="kt">var</span> <span class="n">line</span> <span class="p">=</span> <span class="k">await</span> <span class="n">reader</span><span class="p">.</span><span class="nf">ReadLineAsync</span><span class="p">();</span>
     <span class="n">line</span> <span class="p">=</span> <span class="n">line</span><span class="p">?.</span><span class="nf">Replace</span><span class="p">(</span><span class="s">"data: "</span><span class="p">,</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">).</span><span class="nf">Trim</span><span class="p">();</span>
     <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">line</span> <span class="p">!=</span> <span class="s">"[DONE]"</span><span class="p">)</span>
     <span class="p">{</span>
         <span class="kt">var</span> <span class="n">jsonObject</span> <span class="p">=</span> <span class="n">JsonNode</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
         <span class="kt">var</span> <span class="n">responseContent</span> <span class="p">=</span> <span class="n">jsonObject</span><span class="p">?[</span><span class="s">"choices"</span><span class="p">]?[</span><span class="m">0</span><span class="p">]?[</span><span class="s">"delta"</span><span class="p">]?[</span><span class="s">"content"</span><span class="p">]?.</span><span class="nf">ToString</span><span class="p">();</span>
         <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">responseContent</span><span class="p">))</span>
         <span class="p">{</span>
             <span class="k">yield</span> <span class="k">return</span> <span class="n">responseContent</span><span class="p">;</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Open <strong>Home.razor</strong>. 
Here, we get the user input which includes the product and the question. This then forms the prompt and is passed to the <code class="language-plaintext highlighter-rouge">StreamChatCompletionsAsync</code> function.
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">Product</span> <span class="n">selectedItem</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">().</span><span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">selectedProduct</span><span class="p">));</span>

 <span class="kt">var</span> <span class="n">queryData</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span>
 <span class="p">{</span>
     <span class="p">{</span><span class="s">"user_message"</span><span class="p">,</span> <span class="n">message</span><span class="p">},</span>
     <span class="p">{</span><span class="s">"product_name"</span><span class="p">,</span> <span class="n">selectedItem</span><span class="p">.</span><span class="n">Name</span><span class="p">},</span>
     <span class="p">{</span><span class="s">"product_description"</span><span class="p">,</span> <span class="n">selectedItem</span><span class="p">.</span><span class="n">Description</span> <span class="p">}</span>
 <span class="p">};</span>

 <span class="kt">var</span> <span class="n">prompt</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">queryData</span><span class="p">);</span>

 <span class="k">await</span> <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">token</span> <span class="k">in</span> <span class="n">slmService</span><span class="p">.</span><span class="nf">StreamChatCompletionsAsync</span><span class="p">(</span><span class="n">prompt</span><span class="p">))</span>
 <span class="p">{</span>
     <span class="n">response</span> <span class="p">+=</span> <span class="n">token</span><span class="p">;</span>
     <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

     <span class="nf">StateHasChanged</span><span class="p">();</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="deploying-your-web-application">Deploying Your Web Application</h2>

<p>Before adding the Phi sidecar extension, you need to deploy your application to Azure App Service. There are two ways to deploy applications: <strong>code-based deployment</strong> and <strong>container-based deployment</strong>.</p>

<p><strong><em>Note: SLMs run along with your webapps and share the available compute resources of the machine.Hence, it is recommended to choose a SKU with atleast 4 vCPU and 7 GB Memory.</em></strong></p>

<p><strong>Code-Based Deployment</strong></p>

<ol>
  <li>
    <p>Go to the Azure Portal and create a .NET 8 Linux App Service.</p>

    <p><img src="/AppService/media/2025/03/create-code-based-app.jpg" alt="Create web app" /></p>
  </li>
  <li>
    <p>Set up CI/CD with GitHub to automate deployments. <a href="https://learn.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=openid%2Caspnetcore">Deploy to App Service using GitHub Actions</a></p>

    <p><em>Note: Sidecars for code-based applications only support GitHub Actions right now. We are rolling out the experience for other deployment methods</em></p>
  </li>
  <li>
    <p>Push your application code to your GitHub repository.</p>
  </li>
</ol>

<p>The deployment pipeline will automatically build and deploy your web application to Azure App Service.</p>

<p><strong>Container-Based Deployment</strong></p>

<ol>
  <li>
    <p>Use the Dockerfile in your repository to build a container image of your application. We have a sample Dockerfile <a href="https://github.com/Azure-Samples/sidecar-samples/blob/main/dotnet-slm-fashion-assistant-app/Dockerfile">here</a></p>
  </li>
  <li>
    <p>Build the image and push it to your preferred container registry, such as Azure Container Registry, Docker Hub, or a private registry.</p>
  </li>
  <li>
    <p>Go to the Azure Portal and create a container-based App Service.</p>

    <p><img src="/AppService/media/2024/07/CreateWebApp.jpg" alt="Create web app" /></p>

    <p>On the Container tab, make sure that Sidecar support is Enabled.</p>

    <p>Specify the details of your application image.</p>

    <p><img src="/AppService/media/2025/03/add-container.jpg" alt="Create web app" /></p>

    <p><em>Note: We strongly recommend enabling <a href="https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=portal%2Chttp">Managed Identity</a> for your Azure resources.</em></p>
  </li>
</ol>

<h2 id="adding-the-phi-sidecar-extension">Adding the Phi Sidecar Extension</h2>

<p>Once your application is deployed, follow these steps to enable the Redis sidecar extension:</p>

<ol>
  <li>Navigate to the <strong>Azure Portal</strong> and open your <strong>App Service</strong> resource.</li>
  <li>
    <p>Go to <strong>Deployment Center</strong> in the left-hand menu and navigate to the <strong>Containers</strong> tab.</p>

    <p><em>Note: You might see a banner which says <strong>*Interested in adding containers to run alongside your app? Click here to give it a try</strong></em>. Clicking on the banner will enable the new Containers experience for you.*</p>
  </li>
  <li>
    <p>Add the Phi sidecar extension like this</p>

    <p><img src="/AppService/media/2025/03/add-phi.jpg" alt="Phi Sidecar" /></p>
  </li>
</ol>

<h2 id="testing-the-application">Testing the application</h2>

<p>After adding the sidecar, wait a few minutes for the application to restart.</p>

<p><em>Note: Since we are deploying a language model, please be aware that the application might take a little longer to start up the first time. This delay is due to the initial setup and loading of the Phi model, which ensures that it is ready to handle requests efficiently. Subsequent startups should be faster once the model is properly initialized.</em></p>

<p>Once the application is live, navigate to it and try asking questions like <code class="language-plaintext highlighter-rouge">Tell me more about this shirt</code> or <code class="language-plaintext highlighter-rouge">How do I pair this shirt?</code></p>

<p><img src="/AppService/media/2025/03/Exercise-4-answer.jpg" alt="Phi app" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>The integration of Phi models as sidecars on Azure App Service for Linux demonstrates the power of Small Language Models (SLMs) in delivering efficient, AI-driven experiences without the overhead of large-scale models. We are actively working on more AI scenarios for Azure App Service and would love to hear what you are building. Your feedback and ideas are invaluable as we continue to explore the possibilities of AI and cloud-based deployments.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Introduction:]]></summary></entry><entry><title type="html">Using the Redis Sidecar Extension with Azure App Service for Linux</title><link href="https://azure.github.io/AppService/2025/03/19/redis-sidecar-extension.html" rel="alternate" type="text/html" title="Using the Redis Sidecar Extension with Azure App Service for Linux" /><published>2025-03-19T00:00:00+00:00</published><updated>2025-03-19T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/03/19/redis-sidecar-extension</id><content type="html" xml:base="https://azure.github.io/AppService/2025/03/19/redis-sidecar-extension.html"><![CDATA[<p>Azure App Service now supports running Redis as a sidecar extension, allowing you to easily add Redis caching to your applications. This blog will walk you through deploying an application to Azure App Service, adding the Redis sidecar extension, and verifying that it works.</p>

<h2 id="configuring-the-application-to-use-redis">Configuring the Application to Use Redis</h2>

<p>You can find the full project code <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/Redis.Core.WebApi-master/Redis.Core.WebApi">here</a>. In this blog, we will highlight some of the main points for configuring your application to use Redis.</p>

<h3 id="setting-up-the-redis-connection-string">Setting Up the Redis Connection String</h3>

<p>In <code class="language-plaintext highlighter-rouge">appsettings.json</code>, set up your Redis connection string:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Redis"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost:6379"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="configuring-redis-in-startupcs">Configuring Redis in <code class="language-plaintext highlighter-rouge">Startup.cs</code></h3>

<p>In <code class="language-plaintext highlighter-rouge">Startup.cs</code>, configure your web API to connect to the Redis instance:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Other service configurations</span>

    <span class="c1">// Add Redis</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddStackExchangeRedisCache</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">options</span><span class="p">.</span><span class="n">Configuration</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"Redis"</span><span class="p">);</span>
        <span class="n">options</span><span class="p">.</span><span class="n">InstanceName</span> <span class="p">=</span> <span class="s">"Redis.Core.WebApi_"</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="c1">// Other service configurations</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-caching-in-the-api">Implementing Caching in the API</h3>

<p>Whenever the API is called, it will first check if the values are in the cache. If not, it will fetch them from the database:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;&gt;</span> <span class="nf">GetWeatherForecasts</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">dataFromCache</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_cache</span><span class="p">.</span><span class="n">GetRecordAsync</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;&gt;(</span><span class="n">WeatherData_Key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dataFromCache</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"Data loaded from cache @"</span> <span class="p">+</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">dataFromCache</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"Data loaded from db @"</span> <span class="p">+</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">dataFromDb</span> <span class="p">=</span> <span class="nf">GetDataFromDB</span><span class="p">();</span>
        <span class="k">await</span> <span class="n">_cache</span><span class="p">.</span><span class="n">SetRecordAsync</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;&gt;(</span><span class="n">dataFromDb</span><span class="p">,</span> <span class="n">WeatherData_Key</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">dataFromDb</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="adding-values-to-the-cache">Adding Values to the Cache</h3>

<p>We have an extension method that adds values to the cache:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="n">SetRecordAsync</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IDistributedCache</span> <span class="n">cache</span><span class="p">,</span>
    <span class="n">T</span> <span class="k">value</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">key</span><span class="p">,</span>
    <span class="n">TimeSpan</span><span class="p">?</span> <span class="n">absoluteExpiry</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
    <span class="n">TimeSpan</span><span class="p">?</span> <span class="n">slidingExpiry</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Caching option</span>
    <span class="kt">var</span> <span class="n">cachingOption</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DistributedCacheEntryOptions</span><span class="p">();</span>

    <span class="c1">// Cache Time to Live, from Current Time to &lt;specified&gt; mins, after that cache will expire</span>
    <span class="n">cachingOption</span><span class="p">.</span><span class="n">AbsoluteExpirationRelativeToNow</span> <span class="p">=</span> <span class="n">absoluteExpiry</span> <span class="p">??</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">60</span><span class="p">);</span>

    <span class="c1">// Cache Time to Live, will slide if it is accessed within the sliding window</span>
    <span class="n">cachingOption</span><span class="p">.</span><span class="n">SlidingExpiration</span> <span class="p">=</span> <span class="n">slidingExpiry</span><span class="p">;</span>

    <span class="c1">// Convert to JSON</span>
    <span class="kt">var</span> <span class="n">dataToStore</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>

    <span class="c1">// Set Cache</span>
    <span class="k">await</span> <span class="n">cache</span><span class="p">.</span><span class="nf">SetStringAsync</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">dataToStore</span><span class="p">,</span> <span class="n">cachingOption</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="deploying-your-web-application">Deploying Your Web Application</h2>

<p>Before adding the Redis sidecar extension, you need to deploy your application to Azure App Service. There are two ways to deploy applications: <strong>code-based deployment</strong> and <strong>container-based deployment</strong>.</p>

<p><strong>Code-Based Deployment</strong></p>

<ol>
  <li>
    <p>Go to the Azure Portal and create a .NET 8 Linux App Service.</p>

    <p><img src="/AppService/media/2025/03/create-code-based-app.jpg" alt="Create web app" /></p>
  </li>
  <li>
    <p>Set up CI/CD with GitHub to automate deployments. <a href="https://learn.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=openid%2Caspnetcore">Deploy to App Service using GitHub Actions</a></p>

    <p><em>Note: Sidecars for code-based applications only support GitHub Actions right now. We are rolling out the experience for other deployment methods</em></p>
  </li>
  <li>
    <p>Push your application code to your GitHub repository.</p>
  </li>
</ol>

<p>The deployment pipeline will automatically build and deploy your web application to Azure App Service.</p>

<p><strong>Container-Based Deployment</strong></p>

<ol>
  <li>
    <p>Use the Dockerfile in your repository to build a container image of your application. We have a sample Dockerfile <a href="https://github.com/Azure-Samples/sidecar-samples/blob/main/Redis.Core.WebApi-master/Redis.Core.WebApi/Dockerfile">here</a></p>
  </li>
  <li>
    <p>Build the image and push it to your preferred container registry, such as Azure Container Registry, Docker Hub, or a private registry.</p>
  </li>
  <li>
    <p>Go to the Azure Portal and create a container-based App Service.</p>

    <p><img src="/AppService/media/2024/07/CreateWebApp.jpg" alt="Create web app" /></p>

    <p>On the Container tab, make sure that Sidecar support is Enabled.</p>

    <p>Specify the details of your application image.</p>

    <p><img src="/AppService/media/2025/03/add-container.jpg" alt="Create web app" /></p>

    <p><em>Note: We strongly recommend enabling <a href="https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=portal%2Chttp">Managed Identity</a> for your Azure resources.</em></p>
  </li>
</ol>

<h2 id="adding-the-redis-sidecar-extension">Adding the Redis Sidecar Extension</h2>

<p>Once your application is deployed, follow these steps to enable the Redis sidecar extension:</p>

<ol>
  <li>Navigate to the <strong>Azure Portal</strong> and open your <strong>App Service</strong> resource.</li>
  <li>
    <p>Go to <strong>Deployment Center</strong> in the left-hand menu and navigate to the <strong>Containers</strong> tab.</p>

    <p><em>Note: You might see a banner which says <strong>*Interested in adding containers to run alongside your app? Click here to give it a try</strong></em>. Clicking on the banner will enable the new Containers experience for you.*</p>
  </li>
  <li>
    <p>Add the Redis sidecar extension like this</p>

    <p><img src="/AppService/media/2025/03/add-redis.jpg" alt="Redis Sidecar" /></p>
  </li>
</ol>

<h2 id="testing-the-redis-connection">Testing the Redis Connection</h2>
<p>Once your deployment is complete, you can browse to <code class="language-plaintext highlighter-rouge">&lt;your application url&gt;/weatherforecast</code></p>

<p>You should see output like this</p>

<p><img src="/AppService/media/2024/07/website-output.jpg" alt="Page output" /></p>

<p>Refresh the page a few times. You can go to the <code class="language-plaintext highlighter-rouge">Log Stream</code> in the Azure Portal to see logs indicating whether the response is coming from the database or the cache.</p>

<p><img src="/AppService/media/2024/07/redis-logs.jpg" alt="Log stream" /></p>

<h2 id="important-caveat">Important Caveat</h2>

<p>The Redis sidecar extension is suitable for caching scenarios and lightweight in-memory storage. It is <strong>not</strong> a replacement for a fully managed Redis instance, such as Azure Cache for Redis, and should not be used for persistent or large-scale data storage.</p>

<h2 id="try-it-out-with-a-sample-python-app">Try It Out with a Sample Python App</h2>

<p>If you want to try the Redis sidecar extension with a Python application, we have a sample available <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/redis-extension-python">here</a>.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Azure App Service now supports running Redis as a sidecar extension, allowing you to easily add Redis caching to your applications. This blog will walk you through deploying an application to Azure App Service, adding the Redis sidecar extension, and verifying that it works.]]></summary></entry><entry><title type="html">Sidecars in Azure App Service: A Deep Dive</title><link href="https://azure.github.io/AppService/2025/03/06/Sidecars-Deep-Dive-Part1.html" rel="alternate" type="text/html" title="Sidecars in Azure App Service: A Deep Dive" /><published>2025-03-06T00:00:00+00:00</published><updated>2025-03-06T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/03/06/Sidecars-Deep-Dive-Part1</id><content type="html" xml:base="https://azure.github.io/AppService/2025/03/06/Sidecars-Deep-Dive-Part1.html"><![CDATA[<p>In November 2024, we announced the <a href="https://techcommunity.microsoft.com/blog/appsonazureblog/announcing-the-general-availability-of-sidecar-extensibility-in-azure-app-servic/4267985">General Availability (GA) of the Sidecar feature for Azure App Service for Linux</a>. Today, we want to dive deep into this feature to help developers understand its capabilities and configurations. This blog post is the first in a series that will explore various aspects of Sidecars, from specification details to deployment and advanced use cases.</p>

<h3 id="what-is-a-sidecar-in-azure-app-service">What is a Sidecar in Azure App Service?</h3>
<p>In a typical App Service deployment, a single container runs the application workload. With the new <strong>Sidecar feature</strong>, you can now deploy additional supporting containers that run alongside the main application container within the same site unit.</p>

<p>This feature applies to <strong>both single-container and multi-container applications</strong>, introducing a new, more intuitive way to configure single-container applications as well. Previously, configuring a single container required setting <code class="language-plaintext highlighter-rouge">LinuxFxVersion=DOCKER|&lt;image details&gt;</code> and defining multiple app settings for details like port configuration. With <strong>SiteContainers</strong>, configuration is now <strong>unified and streamlined</strong> across:</p>
<ul>
  <li><strong>Single-container applications</strong></li>
  <li><strong>Multi-container applications</strong></li>
  <li><strong>Code-based applications</strong> that want to add a sidecar</li>
</ul>

<p>This feature is available for <strong>custom container-based deployments</strong> under a new <code class="language-plaintext highlighter-rouge">LinuxFxVersion</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LinuxFxVersion=sitecontainers
</code></pre></div></div>

<p>For <strong>code-based apps</strong>, customers can also add sidecars that will run alongside the the main code container as part of the site unit.</p>

<p><strong>Note: The content in this document does not apply to sites using Docker Compose</strong></p>

<h2 id="sidecar-specification-format">Sidecar Specification Format</h2>
<p>A <strong>sidecar-enabled site unit</strong> is defined using a JSON specification. Below is an example of what this spec looks like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mcr.microsoft.com/appsvc/staticsite:latest"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"isMain"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"targetPort"</span><span class="p">:</span><span class="w"> </span><span class="s2">"80"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"startUpCommand"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"authType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Anonymous"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"userName"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"passwordSecret"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"userManagedIdentityClientId"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
  </span><span class="nl">"inheritAppSettingsAndConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
  </span><span class="nl">"volumeMounts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"volumeSubPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/host/path"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"containerMountPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/path/in/container"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"readOnly"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"environmentVariables"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"envVarName"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"APPSETTING_REF"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="sidecar-specification-attributes">Sidecar Specification Attributes</h2>
<p>The table below outlines the attributes used in the Sidecar specification. These attributes define the properties of each container within the site unit.</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Is Required</th>
      <th>Default Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">image</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>N/A</td>
      <td>The fully qualified container image to be used.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">isMain</code></td>
      <td>Boolean</td>
      <td>Yes</td>
      <td>false</td>
      <td>Indicates whether this container is the main application container.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">targetPort</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>The port on which the container listens.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">startUpCommand</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>The startup command to run when the container is starting.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">authType</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>Authentication type for the container registry. The allowed values are 1. Anonymous 2. UserCredentials 3. SystemIdentity 4. UserAssigned</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">userName</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>Username for the container registry if required.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">passwordSecret</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>Secret key reference for the container registry password.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">userManagedIdentityClientId</code></td>
      <td>String</td>
      <td>No</td>
      <td>null</td>
      <td>The Managed Identity used for authentication to the container registry.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">inheritAppSettingsAndConnectionStrings</code></td>
      <td>Boolean</td>
      <td>No</td>
      <td>true</td>
      <td>If false, prevents AppSettings from being inherited.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">volumeMounts</code></td>
      <td>Array</td>
      <td>No</td>
      <td>[]</td>
      <td>List of volumes mounted to the container.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">environmentVariables</code></td>
      <td>Array</td>
      <td>No</td>
      <td>[]</td>
      <td>List of environment variables for the container.</td>
    </tr>
  </tbody>
</table>

<p><strong>Attributes for volumeMounts</strong></p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Is Required</th>
      <th>Default Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">volumeSubPath</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>N/A</td>
      <td>Path of the directory relative to the volume on the host.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">containerMountPath</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>N/A</td>
      <td>Target Path on the container.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">readOnly</code></td>
      <td>Boolean</td>
      <td>false</td>
      <td>N/A</td>
      <td>Specify if the mount is read only on container.</td>
    </tr>
  </tbody>
</table>

<p><strong>Attributes for environmentVariables</strong></p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Is Required</th>
      <th>Default Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">name</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>N/A</td>
      <td>Name of the variable on the container.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">value</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>N/A</td>
      <td>The value of this environment variable must be the name of an AppSetting. The actual value of the environment variable in container will be retrieved from the specified AppSetting at runtime. If the AppSetting is not found, the value will be set to an empty string in the container at runtime.</td>
    </tr>
  </tbody>
</table>

<h2 id="important-considerations">Important Considerations</h2>
<ul>
  <li>If you are using custom containers, you would need to set <code class="language-plaintext highlighter-rouge">linuxFxVersion = sitecontainers</code>. If the <code class="language-plaintext highlighter-rouge">LinuxFxVersion=DOCKER|&lt;&gt;</code> is set, any sidecars which are added would be ignored.</li>
  <li>App Service <strong>routes traffic only to the container marked as the main container</strong> (<code class="language-plaintext highlighter-rouge">IsMain=true</code> in the sidecar spec). For Code-based apps, we route traffic to main code container and you should only add other sidecars with IsMain = false.</li>
  <li>All containers <strong>share the same network namespace</strong> and can communicate over <code class="language-plaintext highlighter-rouge">localhost</code>, so port conflicts must be avoided.</li>
  <li>The default storage volume (<code class="language-plaintext highlighter-rouge">/home</code>) is <strong>mounted to all containers</strong> unless App Service Storage is disabled using the app setting:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WEBSITES_ENABLE_APP_SERVICE_STORAGE=false
</code></pre></div>    </div>
  </li>
  <li><strong>All application settings</strong> are passed to all containers as environment variables unless overridden using <code class="language-plaintext highlighter-rouge">inheritAppSettingsAndConnectionStrings=false</code> in the sidecar spec.</li>
  <li>Each container can also have its <strong>own specific environment variables</strong> defined in the spec based on chosen AppSetting references.</li>
  <li>A <strong>custom local volume</strong> can be optionally mounted and shared across containers.</li>
</ul>

<h2 id="additional-resources">Additional Resources</h2>
<p>If you’d like to explore the specifications further and see how to use them in an <strong>ARM template</strong>, check out this example: <a href="https://github.com/Azure-Samples/sidecar-samples/tree/main/sidecar-arm-template">Sidecar ARM Template</a>.</p>

<p>For hands-on tutorials, refer to:</p>
<ul>
  <li><strong>Using sidecars in code-based apps:</strong> <a href="https://learn.microsoft.com/en-us/azure/app-service/tutorial-sidecar?tabs=portal">Tutorial</a></li>
  <li><strong>Using sidecars in container-based apps:</strong> <a href="https://learn.microsoft.com/en-us/azure/app-service/tutorial-custom-container-sidecar">Tutorial</a></li>
</ul>

<p>To explore <strong>scenarios where sidecars add value</strong>, including observability, caching, and AI-based enhancements, refer to the following:</p>
<ul>
  <li>Enhancing Observability with <a href="https://azure.github.io/AppService/2024/07/26/Using-Datadog-with-Sidecar.html">Datadog</a> and <a href="https://azure.github.io/AppService/2024/07/26/Using-Dynatrace-with-Sidecar.html">Dynatrace</a></li>
  <li><a href="https://azure.github.io/AppService/2024/07/19/Using-Redis-with-Sidecar.html">Improving application performance with Redis sidecar</a></li>
  <li><a href="https://azure.github.io/AppService/2024/09/03/Phi3-vector.html">Integrating AI Capabilities Using Sidecars</a></li>
  <li><a href="https://mslabs.cloudguides.com/guides/Sidecars%20in%20Azure%20App%20Service">Try out sidecars in this guided lab</a></li>
</ul>

<h2 id="summary">Summary</h2>
<p>The <strong>Sidecars feature in Azure App Service for Linux</strong> introduces <strong>multi-container support</strong>, allowing customers to build <strong>more complex and modular applications</strong>. By using sidecars, developers can extend the capabilities of their applications while keeping their main app lightweight and focused on core functionality.</p>

<p>In the next part of this series, we’ll explore <strong>how to deploy a sidecar-enabled application</strong> and demonstrate practical use cases. Stay tuned!</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[In November 2024, we announced the General Availability (GA) of the Sidecar feature for Azure App Service for Linux. Today, we want to dive deep into this feature to help developers understand its capabilities and configurations. This blog post is the first in a series that will explore various aspects of Sidecars, from specification details to deployment and advanced use cases.]]></summary></entry><entry><title type="html">Node 22 now available on Azure App Service</title><link href="https://azure.github.io/AppService/2025/02/18/Node-22.html" rel="alternate" type="text/html" title="Node 22 now available on Azure App Service" /><published>2025-02-18T00:00:00+00:00</published><updated>2025-02-18T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2025/02/18/Node-22</id><content type="html" xml:base="https://azure.github.io/AppService/2025/02/18/Node-22.html"><![CDATA[<p>We are happy to announce that App Service now supports apps targeting <a href="https://nodejs.org/en/download/">Node 22</a> across all public regions on Linux App Service Plans.</p>

<p>Want to get started with building apps on Node? Follow these guides:</p>

<ol>
  <li><a href="https://learn.microsoft.com/azure/app-service/quickstart-nodejs?tabs=linux&amp;pivots=development-environment-cli">Create a Node.js web app in Azure</a></li>
  <li><a href="https://learn.microsoft.com/azure/app-service/tutorial-nodejs-mongodb-app">Deploy a Node.js + MongoDB web app to Azure</a></li>
</ol>

<p>The <strong>Azure App Service Community Standup</strong> is your go-to resource for the latest updates, deep dives, and live Q&amp;A with the product team. Stay informed and engaged with our past and upcoming sessions by exploring the full playlist here: <a href="https://www.youtube.com/playlist?list=PLI7iePan8aH75bqCGA_LDtURqAmer8gSc">Azure App Service Community Standup</a>.</p>

<p>You can also <strong>follow us on X</strong> for more updates and news: <a href="https://twitter.com/AzAppService/">@AzAppService</a></p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[We are happy to announce that App Service now supports apps targeting Node 22 across all public regions on Linux App Service Plans.]]></summary></entry></feed>